package presentacio;

import Exceptions.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

/**
 * Pantalla per llistar els autors segons el prefix
 */
public class PantallaLlistaAutorsPrefix extends JFrame {
    private final CtrlPresentacio ctrlPresentacio;
    private JPanel contentPane;
    private JButton HOME;
    private JButton ENRERE;
    private JScrollPane Barra;
    private JList<String> Autors;
    private JLabel NOMAUTORLabel;
    private JPanel panel1JPanel;

    /**
     * Creadora per defecte
     * @param autors_segons_prefix Llista dels autors que contenen el prefix
     */
    public PantallaLlistaAutorsPrefix(ArrayList<String> autors_segons_prefix) {
        super();
        ctrlPresentacio = CtrlPresentacio.getInstance();

        setTitle("PANTALLA CERQUES AUTORS PER PREFIX");
        setContentPane(contentPane);
        getRootPane().setDefaultButton(HOME);
        //setSize(1200, 800);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int amplada = (int) Math.round(screenSize.width * 0.85);
        int alcada = (int) Math.round(screenSize.height * 0.85);
        this.setSize(amplada, alcada);
        setLocationRelativeTo(null);

        contentPane.setBackground(Color.LIGHT_GRAY);
        panel1JPanel.setBackground(Color.LIGHT_GRAY);

        // INIT BUTTONS
        HOME.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                actionPerformed_TornarMenu(event);
            }
        });
        ENRERE.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                actionPerformed_TornarEnrere(event);
            }
        });


        // INIT COMPONENTS
        // inicialitzar taula
        String[] titol = {"AUTOR"};
        DefaultListModel<String> model = new DefaultListModel<String>();
        model.addAll(autors_segons_prefix);
        Autors.setModel(model);
        Autors.setVisible(true);

        //POSEM A ESCOLTAR ELS VALORS SELECCIONATS DE LA LLISTA
        Autors.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
            }
        });

        Autors.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent mouseEvent) {
                JList list = (JList) mouseEvent.getSource();
                if (mouseEvent.getClickCount() == 2) {
                    try {
                        String s = String.valueOf(list.getSelectedValue());
                        ctrlPresentacio.llistarDocumentsAutor(s);
                    } catch (ExceptionNoSessioActiva | ExceptionConsultaLimitParametres | ExceptionAutorNoExisteix |
                             ExceptionDirNoTrobat | ExceptionIO | ExceptionPrefixNoExisteix e) {
                        ctrlPresentacio.popup(e.getMessage(), "Error");
                    }
                }
            }
        });
    }

    /**
     * Funcio per defecte del boto menu.
     * Retorna a la Pantalla Principal.
     */
    public void actionPerformed_TornarMenu(ActionEvent event) {
        this.dispose();
        ctrlPresentacio.controlaVista("PantallaPrincipal");
    }

    /**
     * Funcio per defecte del boto tornar enrere.
     * Retorna a la Pantalla Principal, pero la pantalla que demana dades del prefix segueix oberta.
     */
    public void actionPerformed_TornarEnrere(ActionEvent event) {
        this.dispose();
        ctrlPresentacio.controlaVista("PantallaPrincipal");
        ctrlPresentacio.controlaVista("PantallaDadesPrefix");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        Barra = new JScrollPane();
        contentPane.add(Barra, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        Barra.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        Autors = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        Autors.setModel(defaultListModel1);
        Barra.setViewportView(Autors);
        panel1JPanel = new JPanel();
        panel1JPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1JPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        HOME = new JButton();
        HOME.setText("HOME");
        panel1JPanel.add(HOME, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ENRERE = new JButton();
        ENRERE.setText("ENRERE");
        panel1JPanel.add(ENRERE, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1JPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        NOMAUTORLabel = new JLabel();
        NOMAUTORLabel.setText("NOM AUTOR");
        contentPane.add(NOMAUTORLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}